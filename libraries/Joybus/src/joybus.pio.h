// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// joybus //
// ------ //

#define joybus_wrap_target 13
#define joybus_wrap 16

static const uint16_t joybus_program_instructions[] = {
    0x0002, //  0: jmp    2
    0x8020, //  1: push   block
    0x80a0, //  2: pull   block
    0x6078, //  3: out    null, 24
    0xe000, //  4: set    pins, 0
    0x6021, //  5: out    x, 1
    0x1829, //  6: jmp    !x, 9           side 1
    0xb042, //  7: nop                    side 0
    0x000a, //  8: jmp    10
    0xa142, //  9: nop                           [1]
    0x10e5, // 10: jmp    !osre, 5        side 0
    0xb842, // 11: nop                    side 1
    0xb242, // 12: nop                    side 0 [2]
            //     .wrap_target
    0xa028, // 13: mov    x, !pins
    0xa040, // 14: mov    y, pins
    0x00a2, // 15: jmp    x != y, 2
    0x4021, // 16: in     x, 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program joybus_program = {
    .instructions = joybus_program_instructions,
    .length = 17,
    .origin = -1,
};

static inline pio_sm_config joybus_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + joybus_wrap_target, offset + joybus_wrap);
    sm_config_set_sideset(&c, 2, true, true);
    return c;
}

static inline void joybus_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = joybus_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_clkdiv(&c, clock_get_hz(clk_sys) / 1e6
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
